name: CI/CD - Backend Java 21 con Gradle

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-analyze-deploy:
    runs-on: ubuntu-latest

    env:
      # Ajustamos el nombre y destino para que sea
      # /home/ec2-user/myapp.jar en lugar de /opt/myapp
      JAR_NAME: build/libs/pagos-0.0.1-SNAPSHOT.jar
      REMOTE_JAR_NAME: myapp.jar
      REMOTE_DIR: /home/ec2-user
      SERVICE_NAME: myapp

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build + Tests
        env:
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_USER: ${{ secrets.RDS_USER }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          WEB3J_CLIENT_ADDRESS: ${{ secrets.WEB3J_CLIENT_ADDRESS }}
          CONTRACT_ADDRESS: ${{ secrets.CONTRACT_ADDRESS }}
          WALLET_PRIVATE_KEY: ${{ secrets.WALLET_PRIVATE_KEY }}
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: ./gradlew build sonar --info

#      - name: Preparar JAR
#        run: |
#          # Copiamos el jar generado al nombre fijo
#          cp pagos-0.0.1-SNAPSHOT.jar ${{ env.JAR_NAME }}

      - name: Generar archivo .env
        run: |
          cat <<EOF > .env
          DB_URL=jdbc:postgresql://${{ secrets.RDS_HOST }}:5432/deliverar_db
          DB_USER=${{ secrets.RDS_USER }}
          DB_PASSWORD=${{ secrets.RDS_PASSWORD }}
          WEB3J_CLIENT_ADDRESS=${{ secrets.WEB3J_CLIENT_ADDRESS }}
          CONTRACT_ADDRESS=${{ secrets.CONTRACT_ADDRESS }}
          WALLET_PRIVATE_KEY=${{ secrets.WALLET_PRIVATE_KEY }}
          EOF

      - name: Subir archivo .env a EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env"
          target: "${{ env.REMOTE_DIR }}/.env"
          overwrite: true

      - name: Subir JAR a EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ${{ env.JAR_NAME }}
          target: ${{ env.REMOTE_DIR }}/${{ env.REMOTE_JAR_NAME }}
          overwrite: true

      - name: Detener y arrancar servicio
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Paramos el servicio (si ya existe)
            sudo systemctl stop ${{ env.SERVICE_NAME }}.service || true
            # (opcional) podemos asegurarnos de que no haya procesos java colgados
            pkill -f '/home/ec2-user/myapp.jar' || true
            # Arrancamos el servicio —asegúrate de que tu unit file apunte a este jar:
            sudo systemctl start ${{ env.SERVICE_NAME }}.service
            sudo systemctl status ${{ env.SERVICE_NAME }}.service --no-pager
