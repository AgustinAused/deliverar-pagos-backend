@startuml Event-Driven Architecture Class Diagram

!define RECTANGLE class

package "Events" {
    abstract class Event {
        +String topic
        +Map<String, Object> data
        +Instant timestamp
    }
    
    class IncomingEvent {
        +String source
        +String correlationId
    }
    
    class OutgoingEvent {
        +String destination
        +EventStatus status
        +String errorMessage
    }
    
    enum EventType {
        USER_CREATION_REQUEST("user.creation.request")
        USER_DELETION_REQUEST("user.deletion.request")
        WALLET_CREATION_REQUEST("wallet.creation.request")
        WALLET_DELETION_REQUEST("wallet.deletion.request")
        GET_BALANCES_REQUEST("get.balances.request")
        GET_USER_FIAT_TRANSACTIONS_REQUEST("get.user.fiat.transactions.request")
        GET_USER_CRYPTO_TRANSACTIONS_REQUEST("get.user.crypto.transactions.request")
        FIAT_DEPOSIT_REQUEST("fiat.deposit.request")
        FIAT_WITHDRAWAL_REQUEST("fiat.withdrawal.request")
        FIAT_PAYMENT_REQUEST("fiat.payment.request")
        CRYPTO_PAYMENT_REQUEST("crypto.payment.request")
        BUY_CRYPTO_REQUEST("buy.crypto.request")
        SELL_CRYPTO_REQUEST("sell.crypto.request")
        GET_ALL_FIAT_TRANSACTIONS_REQUEST("get.all.fiat.transactions.request")
        GET_ALL_CRYPTO_TRANSACTIONS_REQUEST("get.all.crypto.transactions.request")
        
        USER_CREATION_RESPONSE("user.creation.response")
        USER_DELETION_RESPONSE("user.deletion.response")
        WALLET_CREATION_RESPONSE("wallet.creation.response")
        WALLET_DELETION_RESPONSE("wallet.deletion.response")
        GET_BALANCES_RESPONSE("get.balances.response")
        GET_USER_FIAT_TRANSACTIONS_RESPONSE("get.user.fiat.transactions.response")
        GET_USER_CRYPTO_TRANSACTIONS_RESPONSE("get.user.crypto.transactions.response")
        FIAT_DEPOSIT_RESPONSE("fiat.deposit.response")
        FIAT_WITHDRAWAL_RESPONSE("fiat.withdrawal.response")
        FIAT_PAYMENT_RESPONSE("fiat.payment.response")
        CRYPTO_PAYMENT_RESPONSE("crypto.payment.response")
        BUY_CRYPTO_RESPONSE("buy.crypto.response")
        SELL_CRYPTO_RESPONSE("sell.crypto.response")
        GET_ALL_FIAT_TRANSACTIONS_RESPONSE("get.all.fiat.transactions.response")
        GET_ALL_CRYPTO_TRANSACTIONS_RESPONSE("get.all.crypto.transactions.response")
        ERROR_RESPONSE("error.response")
    }
    
    enum EventStatus {
        SUCCESS
        FAILURE
        PENDING
    }
}

package "Commands" {
    interface Command {
        +execute(IncomingEvent): CommandResult
        +canHandle(EventType): boolean
    }
    
    class CommandResult {
        +boolean success
        +String message
        +Object data
        +List<String> errors
        +buildSuccess(Object): CommandResult
        +buildFailure(String): CommandResult
    }
    
    abstract class BaseCommand {
        +execute(IncomingEvent): CommandResult
        +validate(IncomingEvent): boolean
        +process(IncomingEvent): CommandResult
    }
    
    class UserCreationCommand {
        -CreateUser createUserUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class UserDeletionCommand {
        -DeleteUser deleteUserUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class WalletCreationCommand {
        -CreateOwner createOwnerUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class WalletDeletionCommand {
        -OwnerRepository ownerRepository
        +process(IncomingEvent): CommandResult
    }
    
    class GetBalancesCommand {
        -GetBalances getBalancesUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class GetUserFiatTransactionsCommand {
        -GetFiatTransactions getFiatTransactionsUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class GetUserCryptoTransactionsCommand {
        -GetTransactions getTransactionsUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class FiatDepositCommand {
        -ExchangeFiat exchangeFiatUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class FiatWithdrawalCommand {
        -ExchangeFiat exchangeFiatUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class FiatPaymentCommand {
        -ExchangeFiat exchangeFiatUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class CryptoPaymentCommand {
        -DeliverCoinService cryptoService
        +process(IncomingEvent): CommandResult
    }
    
    class BuyCryptoCommand {
        -DeliverCoinService cryptoService
        +process(IncomingEvent): CommandResult
    }
    
    class SellCryptoCommand {
        -DeliverCoinService cryptoService
        +process(IncomingEvent): CommandResult
    }
    
    class GetAllFiatTransactionsCommand {
        -GetOwnerFiatTransactions getOwnerFiatTransactionsUseCase
        +process(IncomingEvent): CommandResult
    }
    
    class GetAllCryptoTransactionsCommand {
        -GetOwnerTransactions getOwnerTransactionsUseCase
        +process(IncomingEvent): CommandResult
    }
}

package "Handlers" {
    interface EventHandler {
        +handle(IncomingEvent): void
        +canHandle(EventType): boolean
    }
    
    class EventRouter {
        -Map<EventType, EventHandler> handlers
        -CommandManager commandManager
        +routeEvent(IncomingEvent): void
        +registerHandler(EventType, EventHandler): void
    }
    
    class DefaultEventHandler {
        -CommandManager commandManager
        -EventPublisher eventPublisher
        +handle(IncomingEvent): void
        +publishResponse(CommandResult): void
    }
}

package "Management" {
    class CommandManager {
        -List<Command> commands
        +executeCommand(IncomingEvent): CommandResult
        +registerCommand(Command): void
        +findCommand(EventType): Command
    }
    
    class EventPublisher {
        -HubPublisher hubPublisher
        +publish(OutgoingEvent): void
        +publishError(IncomingEvent, String): void
    }
}

' Relationships
Event <|-- IncomingEvent
Event <|-- OutgoingEvent
EventType --> Event
EventStatus --> OutgoingEvent

Command <|.. BaseCommand
BaseCommand <|-- UserCreationCommand
BaseCommand <|-- UserDeletionCommand
BaseCommand <|-- WalletCreationCommand
BaseCommand <|-- WalletDeletionCommand
BaseCommand <|-- GetBalancesCommand
BaseCommand <|-- GetUserFiatTransactionsCommand
BaseCommand <|-- GetUserCryptoTransactionsCommand
BaseCommand <|-- FiatDepositCommand
BaseCommand <|-- FiatWithdrawalCommand
BaseCommand <|-- FiatPaymentCommand
BaseCommand <|-- CryptoPaymentCommand
BaseCommand <|-- BuyCryptoCommand
BaseCommand <|-- SellCryptoCommand
BaseCommand <|-- GetAllFiatTransactionsCommand
BaseCommand <|-- GetAllCryptoTransactionsCommand
Command --> CommandResult

EventHandler <|.. DefaultEventHandler
EventRouter --> EventHandler
EventRouter --> CommandManager
DefaultEventHandler --> CommandManager
DefaultEventHandler --> EventPublisher

CommandManager --> Command
EventPublisher --> OutgoingEvent

@enduml 